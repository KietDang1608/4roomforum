@using _4roomforum.DTOs
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Danh sách Bài viết";
    var PaginationPosts = ViewBag.PaginationPosts as IEnumerable<PostDTO>;
    var posts = ViewBag.AllPosts as IEnumerable<PostDTO>;
    var CurrentPage = ViewBag.CurrentPage;
    var TotalPages = ViewBag.TotalPages;
    var TotalPosts = ViewBag.TotalPosts;
    var ThreadId = ViewBag.ThreadId;


}

<div class="container mt-5">
    <!-- Input and Create Post Button -->
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Bạn đang nghĩ gì?</h5>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createPostModal">Tạo bài viết</button>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="modal fade" id="createPostModal" tabindex="-1" aria-labelledby="createPostModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createPostModalLabel">Tạo bài viết</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="createPostForm" asp-controller="Post" asp-action="AddPost">
                        <!-- Hidden fields -->
                        <input type="hidden" name="ThreadId" value="@ThreadId" />
                        <input type="hidden" name="PostedBy" value="@User.FindFirst("UserId")?.Value">
                        <input type="hidden" name="IsCreatedByAdmin" value="false" />

                        @if (User.IsInRole("2"))  // Kiểm tra nếu người dùng là admin
                        {
                            <input type="hidden" name="IsCreatedByAdmin" value="true" />
                        }
                        <div class="mb-3">
                            <label for="postTitle" class="form-label">Tiêu đề bài viết</label>
                            <textarea class="form-control" id="postTitle" name="PostTitle" rows="4" placeholder="Tiêu đề" required></textarea>
                        </div>
                        <!-- Post content -->
                        <div class="mb-3">
                            <label for="postContent" class="form-label">Nội dung bài viết</label>
                            <textarea class="form-control" id="postContent" name="PostContent" rows="4" placeholder="Bạn đang nghĩ gì?" required></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" form="createPostForm" class="btn btn-primary">Đăng bài viết</button>
                </div>
            </div>
        </div>
    </div>

    <h2 class="text-center text-success">Danh sách Bài viết</h2>
    <div class="row">
        @if (PaginationPosts != null && TotalPosts > 0)
        {
            foreach (var post in PaginationPosts)
            {
                var isCurrentUserPost = post.PostedBy.ToString() == User.FindFirst("UserId")?.Value;
                var isAdmin = User.IsInRole("2");
                var isCreatedByAdmin = post.IsCreatedByAdmin;
                <div id="post-@post.Id" class="col-md-12 mb-4">
                    <div class="card @(isCurrentUserPost ? "border-primary" : "border-secondary")">
                        <div class="card-header @(isCurrentUserPost ? "bg-light" : "") d-flex justify-content-between align-items-center">
                            
                            <div class="title-view-mode">
                                <h5 class="card-title"><a href="@Url.Action("Index", "Reply", new { PostId = post.Id })">Tiêu đề: @post.PostTitle</a></h5>
                            </div>
                            <div class="title-edit-mode d-none">
                                <input type="text" class="form-control" value="@post.PostTitle">
                            </div>

                            @if (isCurrentUserPost)
                            {
                                <span class="badge bg-primary text-white fw-bold">Bài viết của bạn</span>
                            }
                        </div>
                        <div class="card-body">

                            <div class="card-text content-view-mode">
                                <p>@post.PostContent</p>
                            </div>
                            <div class="content-edit-mode d-none">
                                <textarea class="form-control">@post.PostContent</textarea>
                                <button class="btn btn-success btn-sm mt-2" onclick="saveEdit(@post.Id)">Lưu</button>
                                <button class="btn btn-secondary btn-sm mt-2" onclick="cancelEdit(@post.Id)">Hủy</button>
                            </div>

                            <small class="text-muted">Người đăng: @post.PostedBy</small><br />
                            <small class="text-muted">Ngày đăng: @post.PostDate.ToString("dd/MM/yyyy")</small>
                            <small class="text-muted d-block">
                                Được chỉnh sửa: @(post.IsEdited ? "Có" : "Không")
                            </small>
                            <div class="d-flex justify-content-between align-items-center mt-2">
                                <span class="badge bg-info text-dark">Lượt like: @post.Like</span>
                                <div>
                                    <button class="btn btn-outline-primary btn-sm me-2">Like</button>
                                    <button class="btn btn-outline-secondary btn-sm">Bình luận</button>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <h6>Bình luận</h6>
                            <div class="list-group">
                                <div class="list-group-item">
                                    <p class="mb-1"><strong>User:</strong> Bình luận mẫu</p>
                                    <small class="text-muted">Ngày bình luận: 01/01/2024</small>
                                </div>
                            </div>
                            <div class="mt-2">
                                @if (isCurrentUserPost)
                                {
                                    <a href="javascript:void(0);" class="btn btn-warning btn-sm me-2" onclick="enableEdit(@post.Id)">Chỉnh sửa</a>
                                }
                                @if (isCurrentUserPost || (isAdmin && !isCreatedByAdmin))
                                {
                                    <form asp-controller="Post" asp-action="DeletePost" asp-route-id="@post.Id" asp-route-threadId="@post.ThreadId" asp-route-userId="@User.FindFirst("UserId")?.Value" method="post" class="d-inline">
                                        <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Bạn có chắc muốn xóa bài viết này không?')">Xóa</button>
                                    </form>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

        }
        else
        {
            <p class="text-center text-muted">Không có bài viết nào.</p>
        }
    </div>
</div>

@if (TotalPages > 1)
{
    <div class="d-flex justify-content-center align-items-center mt-4">
        <nav aria-label="Pagination">
            <ul class="pagination">
                <!-- Nút Previous -->
                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?page=@(CurrentPage - 1)" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>

                <!-- Danh sách các trang -->
                @for (int i = 1; i <= TotalPages; i++)
                {
                    <li class="page-item @(i == CurrentPage ? "active" : "")">
                        <a class="page-link" href="?page=@i">@i</a>
                    </li>
                }

                <!-- Nút Next -->
                <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                    <a class="page-link" href="?page=@(CurrentPage + 1)" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
}

<script>
    function enableEdit(postId) {
        const titleViewMode = document.querySelector(`#post-${postId} .title-view-mode`);
        const titleEditMode = document.querySelector(`#post-${postId} .title-edit-mode`);

        const contentViewMode = document.querySelector(`#post-${postId} .content-view-mode`);
        const contentEditMode = document.querySelector(`#post-${postId} .content-edit-mode`);

        if (titleViewMode && titleEditMode && contentViewMode && contentEditMode) {
            titleViewMode.classList.add('d-none');
            titleEditMode.classList.remove('d-none');

            contentViewMode.classList.add('d-none');
            contentEditMode.classList.remove('d-none');
        } else {
            console.error(`Không tìm thấy phần tử với ID: post-${postId}`);
        }
    }

    function cancelEdit(postId) {
        const titleViewMode = document.querySelector(`#post-${postId} .title-view-mode`);
        const titleEditMode = document.querySelector(`#post-${postId} .title-edit-mode`);

        const contentViewMode = document.querySelector(`#post-${postId} .content-view-mode`);
        const contentEditMode = document.querySelector(`#post-${postId} .content-edit-mode`);

        if (titleViewMode && titleEditMode && contentViewMode && contentEditMode) {
            titleEditMode.classList.add('d-none');
            titleViewMode.classList.remove('d-none');

            contentEditMode.classList.add('d-none');
            contentViewMode.classList.remove('d-none');
        } else {
            console.error(`Không tìm thấy phần tử với ID: post-${postId}`);
        }
    }


    function saveEdit(postId) {
        const title = document.querySelector(`#post-${postId} input`).value;
        const content = document.querySelector(`#post-${postId} textarea`).value;
        const threadId = document.querySelector('input[name="ThreadId"]').value;
        const userId = document.querySelector('input[name="PostedBy"]').value;

        const updatePostDTO = {
            PostTitle: title,
            PostContent: content,
            PostDate: new Date().toISOString(), // Lấy thời gian hiện tại, định dạng ISO 8601
            IsEdited: true // Đánh dấu rằng bài viết đã chỉnh sửa
        };
        var json = JSON.stringify(updatePostDTO);

        const url = `/Post/${postId}/${threadId}/${userId}`;

        $.ajax({
            url: url,
            method: 'PUT',
            contentType: 'application/json; charset=utf-8',
            data: json,
            success: function (data, textStatus, jqXHR) {
                if (data.success) {
                    alert(data.message);

                    // Cập nhật nội dung bài viết trên giao diện
                    const postElement = document.querySelector(`#post-${postId}`);
                    postElement.querySelector('input').value = data.title;
                    postElement.querySelector('textarea').value = data.content;

                    // Nếu bạn muốn hiển thị thời gian cập nhật hoặc thông tin khác
                    // const postDateElement = postElement.querySelector('.post-date');
                    // postDateElement.textContent = new Date(data.updatedPost.PostDate).toLocaleString();

                    const titleViewMode = document.querySelector(`#post-${postId} .title-view-mode`);
                    const titleEditMode = document.querySelector(`#post-${postId} .title-edit-mode`);
                    
                    const contentViewMode = document.querySelector(`#post-${postId} .content-view-mode`);
                    const contentEditMode = document.querySelector(`#post-${postId} .content-edit-mode`);

                    titleViewMode.innerHTML = `<h5 class="card-title">Tiêu đề: ${data.title}</h5>`;
                    contentViewMode.innerHTML = `<p>${data.content}</p>`;

                    if (titleViewMode && titleEditMode && contentViewMode && contentEditMode) {
                        titleEditMode.classList.add('d-none');
                        titleViewMode.classList.remove('d-none');

                        contentEditMode.classList.add('d-none');
                        contentViewMode.classList.remove('d-none');
                    } else {
                        console.error(`Không tìm thấy phần tử với ID: post-${postId}`);
                    }
                } else {
                    alert(data.message); // Hiển thị thông báo lỗi
                }
            },
            error: function (err) {
                console.error('Lỗi:', err);
            }
        });
    }

</script>
